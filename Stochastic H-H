function [Y] = StochasticHH_func(loop,dt, I, Area,Vr)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parameter Values

% Number of Channels
NNa = round(Area*60); % Na
NK = round(Area*18); % K

% Capacitance
C = 1; % muF /cm^2

% Na Current\
gNamax = 50; % mS/cm^2
ENa = 110; % mV

% K Current
gKmax = 10; % mS/cm^2
EK = -35; % mV

% Passive Leak
gL = 0.187; % mS / cm^2
EL = -3.563; % mV%%%%%%%%%%%%%%%

% Initial Values
i=1;
tswitch=0;
t=0;


t0 = 0;
V0 = -63.3; %initial membrane potential value
m0 = alpham(V0,Vr) / (alpham(V0,Vr) + betam(V0,Vr)); % m
h0 = alphah(V0,Vr) / (alphah(V0,Vr) + betah(V0,Vr)); % h
n0 = alphan(V0,Vr) / (alphan(V0,Vr) + betan(V0,Vr)); % n

 
% Initialize Output
Y = zeros(loop*0.05,1); 
Y(1,1) = [V0]; %because of the enforced constant timestep we dont need to keep track of time



% Initialize channel states
% Where MCNa and MCK are the number of Na and K channels in each state
% MCNa(1,1) represents the state m1h0, MCNa(2,1) m2h0... MCNa(1,2) the state m1h1 etc.
% MCK(1) corresponds to n0, MCK(2) to n1 etc

  MCNa(1,1) = round(NNa*(1-m0)^3*(1-h0));
  MCNa(2,1) = round(NNa*3*(1-m0)^2*m0*(1-h0)); 
  MCNa(3,1) = round(NNa*3*(1-m0)^1*m0^2*(1-h0));
  MCNa(4,1) = round(NNa*(1-m0)*m0^3*(1-h0)); 
  MCNa(1,2) = round(NNa*(1-m0)^3*(h0));
  MCNa(2,2) = round(NNa*3*(1-m0)^2*m0*(h0));
  MCNa(3,2) = round(NNa*3*(1-m0)^1*m0^2*(h0)); 
  MCNa(4,2) = NNa - sum(sum(MCNa));
  MCK(1:4) = round(NK*[(1-n0)^4 4*n0*(1-n0)^3 6*n0^2*(1-n0)^2 4*n0^3*(1-n0)^1 ]);
  MCK(5) = NK-sum(sum(MCK));
  
  
  
 %start the loop

 for a=2:loop

    
  % Update subunits
  
    NaFraction = MCNa(4,2) / NNa; %open Na channel fraction
    KFraction = MCK(5) / NK;      %open K channel fraction
    
    gNa=gNamax*(NaFraction);      %Na conductivity
    gK=gKmax*(KFraction);         %K conductivity
    
    INa= gNa*(V0-ENa-Vr);
    IK= gK* (V0-EK-Vr);
    IL=gL*(V0-EL-Vr);

% Use the current channel state distribution and membrane potential to calculate when and which state change is going to happen
    [MCNa, MCK,ttr]= MarkovChainFraction(V0,Vr, MCNa, MCK);

%Update the membrane potential with the ion current calculated before the state change   
  Vrhs = -( INa + IK + IL - I)/C;
  V = V0 + ttr*Vrhs;

% Enforce the constant timestep

  tswitch=tswitch+ttr;

  if tswitch<dt
      V0=V;    
  elseif tswitch>=dt
      i=i+1;
      tswitch=tswitch-dt;

% Update the output
  Y(i,1) = V;

  % Keep "old values" to use in next Euler time step
  V0 = V;
  t0=t0+dt;
  end
  end
  Y=Y(1:i,:);

end

% Rate constant functions

     function out = alpham(V,Vr)
        out = - 0.32*((V-Vr)-8)/(exp(-((V-Vr) -8)/4)-1);
      end

     function out = betam(V,Vr)
       out = 0.28*((V-Vr)-35)/(exp(((V-Vr)-35)/5) - 1);
     end

     function out = alphah(V,Vr)
       out = 0.128*exp(-((V- Vr) -12)/18);
     end

     function out = betah(V,Vr)
       out = 4/(exp(-((V-Vr) - 35)/5) + 1);
     end

     function out = alphan(V,Vr)
       out = -0.032*((V-Vr) -10)/(exp(-((V-Vr) - 10)/5)-1);
     end

     function out = betan(V,Vr)
       out = 0.5 *exp(-((V-Vr) - 5)/40);
     end

% Function to calculate the state change

function [NaStateOut, KStateOut,ttr]= MarkovChainFraction(V,Vr, NaStateIn, KStateIn)


Nastate = NaStateIn;
Kstate = KStateIn;
  

    % Determine which state switches by partitioning total rate into its 28 components
    rate(1) = 3.*alpham(V,Vr) * Nastate(1,1);
    rate(2) = rate(1) + 2.*alpham(V,Vr) * Nastate(2,1);
    rate(3) = rate(2) + 1.*alpham(V,Vr) * Nastate(3,1);
    rate(4) = rate(3) + 3.*betam(V,Vr) * Nastate(4,1);
    rate(5) = rate(4) + 2.*betam(V,Vr) * Nastate(3,1);
    rate(6) = rate(5) + 1.*betam(V,Vr) * Nastate(2,1);
    rate(7) = rate(6) + alphah(V,Vr) * Nastate(1,1);
    rate(8) = rate(7) + alphah(V,Vr) * Nastate(2,1);
    rate(9) = rate(8) + alphah(V,Vr) * Nastate(3,1);
    rate(10) = rate(9) + alphah(V,Vr) * Nastate(4,1);
    rate(11) = rate(10) + betah(V,Vr) * Nastate(1,2);
    rate(12) = rate(11) + betah(V,Vr) * Nastate(2,2);
    rate(13) = rate(12) + betah(V,Vr) * Nastate(3,2);
    rate(14) = rate(13) + betah(V,Vr) * Nastate(4,2);
    rate(15) = rate(14) + 3.*alpham(V,Vr) * Nastate(1,2);
    rate(16) = rate(15) + 2.*alpham(V,Vr) * Nastate(2,2);
    rate(17) = rate(16) + 1.*alpham(V,Vr) * Nastate(3,2);
    rate(18) = rate(17) + 3.*betam(V,Vr) * Nastate(4,2);
    rate(19) = rate(18) + 2.*betam(V,Vr) * Nastate(3,2);
    rate(20) = rate(19) + 1.*betam(V,Vr) * Nastate(2,2);
    rate(21) = rate(20) + 4.*alphan(V,Vr) * Kstate(1);
    rate(22) = rate(21) + 3.*alphan(V,Vr) * Kstate(2);
    rate(23) = rate(22) + 2.*alphan(V,Vr) * Kstate(3);
    rate(24) = rate(23) + 1.*alphan(V,Vr) * Kstate(4);
    rate(25) = rate(24) + 4.*betan(V,Vr) * Kstate(5);
    rate(26) = rate(25) + 3.*betan(V,Vr) * Kstate(4);
    rate(27) = rate(26) + 2.*betan(V,Vr) * Kstate(3);
    rate(28) = rate(27) + 1.*betan(V,Vr) * Kstate(2);

    % Total Transition Rate
    totalrate = rate(28);

    % Exponential Waiting Time Distribution
    ttr = -log(rand()) / totalrate;


   % Scaled Uniform RV to determine which state to switch
      r = totalrate*rand();

      if (r <= rate(1)) 
        Nastate(1,1) = Nastate(1,1)-1;
        Nastate(2,1) = Nastate(2,1)+1 ;
      elseif (r <= rate(2)) 
       Nastate(2,1) = Nastate(2,1)-1;
       Nastate(3,1) = Nastate(3,1)+1 ;
      elseif (r <= rate(3)) 
       Nastate(3,1) = Nastate(3,1)-1;
       Nastate(4,1) = Nastate(4,1)+1 ;
      elseif (r <= rate(4)) 
       Nastate(4,1) = Nastate(4,1)-1;
       Nastate(3,1) = Nastate(3,1)+1 ; 
      elseif (r <= rate(5)) 
       Nastate(3,1) = Nastate(3,1)-1;
       Nastate(2,1) = Nastate(2,1)+1;
      elseif (r <= rate(6)) 
       Nastate(2,1) = Nastate(2,1)-1;
       Nastate(1,1) = Nastate(1,1)+1;
      elseif (r <= rate(7)) 
       Nastate(1,1) = Nastate(1,1)-1;
       Nastate(1,2) = Nastate(1,2)+1;
      elseif (r <= rate(8)) 
       Nastate(2,1) = Nastate(2,1)-1;
       Nastate(2,2) = Nastate(2,2)+1;
      elseif (r <= rate(9)) 
       Nastate(3,1) = Nastate(3,1)-1;
       Nastate(3,2) = Nastate(3,2)+1;
      elseif (r <= rate(10)) 
       Nastate(4,1) = Nastate(4,1)-1;
       Nastate(4,2) = Nastate(4,2)+1;
      elseif (r <= rate(11)) 
       Nastate(1,2) = Nastate(1,2)-1;
       Nastate(1,1) = Nastate(1,1)+1;
      elseif (r <= rate(12)) 
       Nastate(2,2) = Nastate(2,2)-1;
       Nastate(2,1) = Nastate(2,1)+1;
      elseif (r <= rate(13)) 
       Nastate(3,2) = Nastate(3,2)-1;
       Nastate(3,1) = Nastate(3,1)+1;
      elseif (r <= rate(14)) 
       Nastate(4,2) = Nastate(4,2)-1;
       Nastate(4,1) = Nastate(4,1)+1;
      elseif (r <= rate(15)) 
       Nastate(1,2) = Nastate(1,2)-1;
       Nastate(2,2) = Nastate(2,2)+1;
      elseif (r <= rate(16)) 
       Nastate(2,2) = Nastate(2,2)-1;
       Nastate(3,2) = Nastate(3,2)+1;
      elseif (r <= rate(17)) 
       Nastate(3,2) = Nastate(3,2)-1;
       Nastate(4,2) = Nastate(4,2)+1;
      elseif (r <= rate(18)) 
       Nastate(4,2) = Nastate(4,2)-1;
       Nastate(3,2) = Nastate(3,2)+1;
      elseif (r <= rate(19)) 
       Nastate(3,2) = Nastate(3,2)-1;
       Nastate(2,2) = Nastate(2,2)+1;
      elseif (r <= rate(20)) 
       Nastate(2,2) = Nastate(2,2)-1;
       Nastate(1,2) = Nastate(1,2)+1;
      elseif (r <= rate(21)) 
       Kstate(1) = Kstate(1)-1;
       Kstate(2) = Kstate(2)+1;
      elseif (r <= rate(22)) 
       Kstate(2) = Kstate(2)-1;
       Kstate(3) = Kstate(3)+1;
      elseif (r <= rate(23)) 
       Kstate(3) = Kstate(3)-1;
       Kstate(4) = Kstate(4)+1;
      elseif (r <= rate(24)) 
       Kstate(4) = Kstate(4)-1;
       Kstate(5) = Kstate(5)+1;
      elseif (r <= rate(25)) 
       Kstate(5) = Kstate(5)-1;
       Kstate(4) = Kstate(4)+1;
      elseif (r <= rate(26)) 
       Kstate(4) = Kstate(4)-1;
       Kstate(3) = Kstate(3)+1;
      elseif (r <= rate(27)) 
       Kstate(3) = Kstate(3)-1;
       Kstate(2) = Kstate(2)+1;
      else
       Kstate(2) = Kstate(2)-1;
       Kstate(1) = Kstate(1)+1;
      end 
  
NaStateOut = Nastate;
KStateOut = Kstate;
end 
